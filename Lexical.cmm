#include <string.hmm>
#include <stdlib.hmm>
#include <stdio.hmm>
#include <ctype.hmm>

#include "Lexical.hmm"
#include "Assemble.hmm"
#include "SymTbl.hmm"
#include "Pass1.hmm"
#include "RsvWord.hmm"
#include "Error.hmm"
#include "Pass2.hmm"

// 大域変数
public char ch;             /* 現在の文字 */
public char nextch;         /* 1つ先の文字 */
public int token_num;       /* トークン番号 */
public char[] str;          /* つづりの記憶領域を生成 */


#define EOF '\x7f'      //ASCII, UTF-8でDEL文字

// static変数

int position;       /* カーソルポジション */
int ln;             /* 現在の行 */
int ln2;            /* 現在の行 */
int opnum;            /* token番号の控え */


// 次の文字を取ってきて行を1行進める関数
public char getCh() {
    ch = nextch;                                /* 次の文字を現在の文字にする */
    if(feof(sourcefp)) {                        /* 次の入力がEOFなら */
        nextch = EOF;                           /* nextchにEOFの目印を */
    } else {                                    /* そうでなければ */
        nextch = toUpper(fgetc(sourcefp));      /* nextchに次の文字を読み込む */
        if(nextch==EOF)                         /* nextchにEOFが読み込まれていたら */
            error("input has '\x7f'");          /* 入力にEOFをがあるエラーを出力 */
    }
    if(ch=='\n') ln2 = ln2 + 1;                 /* 改行なら次の行に進める */
    return ch;                                  /* 現在の文字を返す */
}

// 改行が来るまで空白を飛ばす関数
void skipSpaces() {
    while(ch != '\n' && isSpace(ch)){               /* 改行以外かつ空白なら */
        getCh();                                    /* 1文字読み飛ばす */
    }
}

// 行末まで読み飛ばす関数
void skipToNewLineOrEOF() {
    while(ch != '\n' && ch != EOF){                 /* 改行かEOFが来るまで */
        getCh();                                    /* 1文字読み飛ばす */
    }
}

// C++タイプのコメントを読み飛ばす関数
void skipCppCom() {
    skipToNewLineOrEOF();                           /* 改行またはEOFまで読み飛ばす */
}

//コメント、空白を読み飛ばす
void skipAllSpaces() {
    while(true) {
        skipSpaces();                               /* 改行以外の空白を飛ばす */
        if(ch == '/' && nextch == '/') {            /* "//"ならコメント開始 */
            skipCppCom();                           /* コメントを読み飛ばす */
        } else if(ch == '\n') {
            getCh();
        } else{ 
            break;                                  /* "//",'\n'以外なら抜け出す */
        }
    }
}

// 8進数字かテスト
boolean isOdigit(char ch) {
  return ord('0') <= ord(ch) && ord(ch) <= ord('7'); // '0'〜'7'が8進数
}

// 16進数字の値を返す
int hex(char ch) {
  if (isDigit(ch)) return ord(ch) - ord('0');      // '0'〜'9'の場合
  ch = toUpper(ch);                                // 英字は大文字に統一
  return ord(ch) - ord('A') + 10;                  // 'A'〜'F'の場合
}

// 16進数を読んで値を返す
int getHex() {
  if (!isXdigit(ch))                               // 0x の次に16進数がない
    error("16進数の形式");
  int v = 0;                                       // 初期値は 0
  while (isXdigit(ch)) {                           // 16進数字の間
    v = v*16 + hex(ch);                            // 値を計算
    getCh();                                       // 次の文字を読む
  }
  return v;                                        // 16進数の値を返す
}

// 8進数を読んで値を返す
int getOct() {
  int val = 0;                                     // 初期値は 0
  while (isOdigit(ch)) {                           // 8進数字の間
    val = val*8 + ord(ch) - ord('0');              // 値を計算
    getCh();                                       // 次の文字を読む
  }
  return val;                                      // 8進数の値を返す
}

// 10進数を読んで値を返す
int getDec() {
  int val = 0;                                     // 初期値は 0
  while (isDigit(ch)) {                            // 10進数字の間
    val = val*10 + ord(ch) - ord('0');             // 値を計算
    getCh();                                       // 次の文字を読む
  }
  return val;						                           // 10進数の値を返す
}

// 数値を読み込む
public int getDigit() {
  int val = 0;
  if(ch=='0' && (nextch=='x' || nextch=='X')) {    // '0x' で始まれば16進数
    getCh();                                       // '0'を読み飛ばす
    getCh();                                       // 'x'を読み飛ばす
    val = getHex();                                // 16進数の読み込み
  } else if(ch=='0') {                             // '0' で始まれば8進数
    val = getOct();                                // 8進数を読み込む
  } else {                                         // それ以外は10進のはず
    val = getDec();                                // 10進数を読み込む
  }
  return val;                                      // val=値
}

// 命令の種類を解析
void searchToken() {
    printf("start searchToken\n");
    int i;
    int length;                                     /* つづりの長さ */
    printf("before str malloc\n");
    str = malloc(LENGTH*sizeof(char));
    printf("after str malloc\n");
    opnum = LABEL;
    for(length=0 , printf("after length\n"); isAlpha(ch) && length<LENGTH; length=length+1){    /* アルファベットで開始かつ長さがオーバーしていない */
        printf("after str of for statement\n");
        str[length] = ch;                           /* 文字を記憶 */
        getCh();                                    /* 次の文字をとってくる */
    }
    
    printf("before /0\n");
    str[length] = '\0';
    printf("after /0\n");

    /* printf("%s\n",str);      bug here */

    printf("after printf str\n");
    for(i=0; i<RsvNum; i=i+1) {                     /* 命令の種類の数まで */
        //printf("before cmpare str and token\n");
        if(strCmp(str,rsvWord[i].token) == 0) {     /* どの命令か判定し一致すれば */
            opnum = rsvWord[i].operation_id;        /* 命令の番号を代入 */        
            break;
        }
    }
    if(opnum != LABEL){
        free(str);                                      /* strの領域解放 */
    }
}

public int getTok(){
    printf("start get Token\n");
    if(ch == '\0')                      /* 一度も文字を取ってきていない場合は */
        getCh();                        /* 初めの文字を取ってくる */
    skipAllSpaces();                    /* 次の文字まで行く */
    if(isAlpha(ch)){                    /* 英文字で始まるなら */
        printf("before search token\n");
        searchToken();                  /* それは命令なのでどの命令か判別する */
        if(opnum == LxDS || opnum == LABEL){              /* DSとDC以外なら */
            skipAllSpaces();            /* 次の数字まで飛んでおく */
        } else{
            skipToNewLineOrEOF();       /* 次の行に進めておく */
        }
        return opnum;                   /* 命令の番号を返す */
    } else{
        skipToNewLineOrEOF();           /* どれでもなければ次の行に行く */
    }

    if(ch == EOF){
        return -1;
    } else{
        return 0;
    }
    return 0;
}

// 全体の初期化
public void Initialization() {
    ch = '\0';                          /* 現在の文字を初期化 */
    nextch = '\n';                      /* 次の文字の初期化 */
    position = 0;
    if(pass1flag == false){
        clearSymTbl();                      /* ラベル表を初期化 */
        initializePass1();                  /* Pass1を初期化する */
    }
    initializePass2();
}

